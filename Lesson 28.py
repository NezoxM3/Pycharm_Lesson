#Практичний модуль:
#"Створення програми для управління персональними фінансами"
#1. Змінні та базові операції
#Завдання:
#Створіть програму, яка запитує у користувача:
#Скільки грошей у нього зараз в гаманці?
#Скільки він витратив на обід?
#Скільки планує витратити на транспорт?
#Розрахуйте та виведіть, скільки у нього залишиться грошей після цих витрат.

money = (float(input("\nСкільки у вас грошей у гаманці:")))
lunch_money = (float(input("Скільки ви витратили на обід:")))
vehicle_money = (float(input("Скільки ви витратили на транспорт:")))

balance = (money - (lunch_money + vehicle_money))

print (balance)

#2. Умови
#Завдання:
#Додайте перевірку:
#Якщо після витрат залишок менше за 100 грн, вивести повідомлення:
#"Грошей мало, час економити!".
#Якщо залишок більше 100 грн, вивести:
#"Все добре, можна трохи витратити на себе."

if balance <= 100:
    print("Час економити")
else:
    print("Все добре, можна ще трохи витратити на себе")

#3. Цикли
#Завдання:
#Запитайте у користувача кількість днів,
#Протягом яких він хоче вести облік витрат.
#Створіть цикл, у якому на кожен день програма запитує витрати на їжу,
#Транспорт та інші потреби.
#Розрахуйте загальні витрати за всі дні.


days = int(input("\nВведіть кількість днів, протягом яких ви хочете вести облік витрат: "))

total_spending = 0
daily_spending = {} # 5 Завдання (Сам словник)

for day in range(1, days +1):
    print(f"\nДень {day}:")
    food_spending = float(input("Витрати на їжу:"))
    vehicle_spending = float(input("Витрати на транспорт:"))
    other_spending = float(input("Витрати на інші потреби:"))

    total_daily_spending = food_spending + vehicle_spending + other_spending
    daily_spending[f"День {day}"] = total_daily_spending  # 5 Завдання (Додаємо у словник)
    print(f"Витрати за {day} день: {total_daily_spending:}")

    total_spending += total_daily_spending

print("\nСписок щоденних витрат:",  daily_spending) # 5 Завдання (Виводимо словник)
print(f"Витрати за {days} днів: {total_spending:}")

#4. Списки
#Завдання:
#Створіть список, у якому зберігатимуться витрати на кожен день.
#Виведіть цей список після завершення циклу.

#5. Словники
#Завдання:
#Розширте програму, щоб витрати зберігалися у словнику,
# де ключ — це день (наприклад, "День 1", "День 2"),
# а значення — загальні витрати за цей день.
#Виведіть словник у зручному форматі.

#6. Функції
#Завдання:
#Виділіть обчислення загальної суми витрат у функцію
# calculate_total_expenses(expenses_dict).
#Додайте функцію average_daily_expense(expenses_dict),
# яка обчислює середні витрати на день.
#Викличте ці функції та виведіть результати.

#7. Tkinter
#Завдання:
#Створіть простий графічний інтерфейс для введення витрат.
#Поля для вводу: витрати на їжу, транспорт, інше.
#Кнопка "Додати день", яка додає витрати до списку.
#Кнопка "Результати", яка показує загальні витрати за всі дні у вікні.

